[user]

name = Shawn Patrick Rice
email = rice@shawnrice.org
signingkey = A1B3F64C6036C3A4

[credential]
helper = osxkeychain

[commit]
gpgsign = true

[alias]

# View abbreviated SHA, description, and history graph of the latest 20 commits
l = log --pretty=oneline -n 20 --graph --abbrev-commit

# View the current working tree status using the short format
s = status -s

# Show the diff between the latest commit and the current state
d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

# `git di $number` shows the diff between the state `$number` revisions ago and the current state
di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

# Pull in remote changes for the current repository and all its submodules
p = !"git pull; git submodule foreach git pull origin master"

# Clone a repository including all submodules
c = clone --recursive

# Commit all changes
ca = !git add -A && git commit -av

# Switch to a branch, creating it if necessary
go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

# Show verbose output about tags, branches or remotes
tags = tag -l
branches = branch -a
remotes = remote -v

# Amend the currently staged files to the latest commit
amend = commit --amend --reuse-message=HEAD

# Credit an author on the latest commit
credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

# Interactive rebase with the given number of latest commits
reb = "!r() { git rebase -i HEAD~$1; }; r"

# Find branches containing commit
fb = "!f() { git branch -a --contains $1; }; f"

# Find tags containing commit
ft = "!f() { git describe --always --contains $1; }; f"

# Find commits by source code
fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

# Find commits by commit message
fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

# Remove branches that have already been merged with master
# a.k.a. ‘delete merged’
dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

# List contributors with number of commits
contributors = shortlog --summary --numbered

# Sample uses (defaults for Tues-Sat: from "yesterday AM" to "now", for Sun-Mon: from "last friday AM" to "now"):
# $ git standup
# $ git standup "last week"
# $ git standup "3 days ago"
# $ git standup "last monday" "last friday"
# $ git standup --stat
# $ git standup "last thursday AM" "last thursday PM" --pretty --date=short
# For date formats: https://github.com/git/git/blob/master/date.c
standup = "!f() { : git log ; \
                if [ $# -gt 0 ] && [[ $1 != -* ]];\
                then\
                        SINCE="${1}";\
                        shift;\
                        if [ $# -gt 0 ] && [[ $1 != -* ]];\
                        then\
                                UNTIL="${1}";\
                                shift;\
                        fi;\
                else\
                        if [ $(date +%u) -lt 2 ];\
                        then\
                                SINCE="\"last friday AM\"";\
                        fi\
                fi;\
                SINCE="${SINCE:-yesterday AM}";\
                UNTIL="${UNTIL:-now}";\
                COMMITTER="$(git config user.name)";\
                git log --since "\"${SINCE}\"" --until "\"${UNTIL}\"" --committer="\"${COMMITTER}\"" --all --abbrev-commit --no-merges --date=local --oneline "\"$@\"";\
        }; f"

cleanup = "!f() { git fetch && git remote prune origin && git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | xargs git branch -d; }; f"

origin = config --get remote.origin.url

open = "!f() { git config --get remote.origin.url | sed 's/.\\{4\\}$//' | xargs open; }; f"

# A few things from ...
# https://haacked.com/archive/2014/07/28/github-flow-aliases/
# Find a different name
# done = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

#   bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"
#   bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

# Saves the current work to a headless commit and resets the branch
wipe = "!git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard"

# work on this... it should show previous wipes to restore
wipes = "!git log -g --abbrev-commit --pretty=oneline --date=short | grep \"HEAD\" | cut -d \" \" -f 1-3"

[apply]

# Detect whitespace errors when applying a patch
whitespace = fix

[core]

editor = code --wait

# Use custom `.gitignore` and `.gitattributes`
excludesfile = ~/.gitignore_global
attributesfile = ~/.gitattributes

# Treat spaces before tabs and all kinds of trailing whitespace as an error
# [default] trailing-space: looks for spaces at the end of a line
# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
whitespace = space-before-tab,-indent-with-non-tab,trailing-space

# Make `git rebase` safer on OS X
# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
trustctime = false

[color]

# Use colors in Git commands that are capable of colored output when
# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
ui = auto

[color "branch"]

current = yellow reverse
local = yellow
remote = green

[color "diff"]

meta = yellow bold
frag = magenta bold # line info
old = red           # deletions
new = green         # additions

[color "status"]

added = yellow
changed = green
untracked = cyan

[diff]

# Detect copies as well as renames
renames = copies
tool = default-difftool

[difftool "default-difftool"]
cmd = code --wait --diff $LOCAL $REMOTE

[help]

# Automatically correct and execute mistyped commands
autocorrect = 1

[merge]

# Include summaries of merged commits in newly created merge commit messages
log = true

[push]

# Use the Git 1.x.x default to avoid errors on machines with old Git
# installations. To use `simple` instead, add this to your `~/.extra` file:
# `git config --global push.default simple`. See http://git.io/mMah-w.
# default = matching
default = upstream

# URL shorthands

[url "git@github.com:"]

insteadOf = "gh:"
pushInsteadOf = "github:"
pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

insteadOf = "github:"

[url "git@gist.github.com:"]

insteadOf = "gst:"
pushInsteadOf = "gist:"
pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

insteadOf = "gist:"
[pull]
rebase = false
